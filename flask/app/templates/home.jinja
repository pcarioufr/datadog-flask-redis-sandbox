<!DOCTYPE html>
<html lang="en">
<head>

    <!-- DEBUG INFO -->
    <!-- env={{dd_env}} -->
    <!-- version={{dd_version}} -->
    <!-- site={{dd_site}} -->
    <!-- token={{clientToken}} -->
    <!-- user_id={{user_id}} -->
    <!-- user_email={{user_email}} -->
    <!-- is_anonymous={{is_anonymous}} -->


<!-- See https://docs.datadoghq.com/logs/log_collection/javascript -->
<!--     https://docs.datadoghq.com/real_user_monitoring/browser  -->
<script 
    type="text/javascript" 
    src="https://www.datadoghq-browser-agent.com/datadog-logs-v4.js">
</script>

<script
    src="https://www.datadoghq-browser-agent.com/datadog-rum-v4.js"
    type="text/javascript">
</script>

<script>

        window.DD_LOGS &&
        DD_LOGS.init({
            site: '{{dd_site}}',
            clientToken: '{{clientToken}}',
            env: '{{dd_env}}',
            version: '{{dd_version}}',
            service: 'browser',
            forwardErrorsToLogs: true,
            sampleRate: 100,
            forwardConsoleLogs: 'all'
        })

        window.DD_RUM && window.DD_RUM.init({
            site: '{{dd_site}}',
            clientToken: '{{clientToken}}',
            env: '{{dd_env}}',
            version: '{{dd_version}}',
            service: 'browser',
            applicationId: '{{applicationId}}',
            sampleRate: 100,
            sessionReplaySampleRate: 100,
            trackInteractions: true,
            trackResources: true,
            trackLongTasks: true,
            defaultPrivacyLevel: 'mask-user-input',
            allowedTracingUrls: [ _ => { return true } ] // https://docs.datadoghq.com/real_user_monitoring/connect_rum_and_traces/?tab=browserrum
        });

        window.DD_RUM &&
        window.DD_RUM.startSessionReplayRecording() ;

        window.DD_LOGS && DD_LOGS.setGlobalContextProperty('team', "sandbox")

        window.DD_RUM && window.DD_RUM.setUser({ 
            id: '{{user_id}}', 
            email: '{{user_email}}', 
            anonymous: '{{is_anonymous}}'
        })
        // window.DD_RUM && window.DD_RUM.addRumGlobalContext('domain', '{{domain}}');

    </script>


    <meta charset="utf-8">
    <title>Chat Sandbox</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='home.css') }}" />


</head>

<body>
    <div class="user-info">
        <span class="user-id">{{user_id}}</span>
        <span class="user-email">{{user_email}}</span>
    </div>
    
    <div class="chat-thread">
        <div class="messages" id="chat-messages"></div>

    </div>
    
    <div class="chat-controls">
        <div class="message-input">
            <textarea 
                id="chat-input" 
                placeholder="Type your message here..."
                onkeydown="if(event.keyCode === 13 && !event.shiftKey) { event.preventDefault(); sendMessage(); }">
            </textarea>
            <button onclick="sendMessage()" id="send-button">Send</button>
        </div>
        <div class="chat-actions">
            <button id="clear-chat-button" class="clear-chat-btn">Clear Chat History</button>
        </div>
    </div>

    <script>
        const messageInput = document.getElementById('chat-input');
        const sendButton = document.getElementById('send-button');
        const messagesContainer = document.getElementById('chat-messages');

        // Load chat history when page loads
        async function loadChatHistory() {
            try {
                const response = await fetch('/api/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        initial_load: true
                    })
                });

                const data = await response.json();
                
                if (data.history && data.history.length > 0) {
                    // Display each message from history
                    data.history.forEach(msg => {
                        addMessage(msg.content, msg.role === 'user');
                    });
                }
            } catch (error) {
                console.error('Error loading chat history:', error);
                addMessage('Hello! How can I help you today?', false);
            }
        }

        function addMessage(content, isUser = false) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${isUser ? 'user-message' : 'assistant-message'}`;
            messageDiv.textContent = content;
            messagesContainer.appendChild(messageDiv);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        async function sendMessage() {
            const message = messageInput.value.trim();
            if (!message) return;

            // Disable input while processing
            messageInput.disabled = true;
            sendButton.disabled = true;

            // Add user message to chat
            addMessage(message, true);
            messageInput.value = '';

            try {
                const response = await fetch('/api/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        prompt: message
                    })
                });

                const data = await response.json();
                
                if (data.response) {
                    addMessage(data.response, false);
                }
            } catch (error) {
                console.error('Error:', error);
                addMessage('Sorry, there was an error processing your request.', false);
            } finally {
                // Re-enable input
                messageInput.disabled = false;
                sendButton.disabled = false;
                messageInput.focus();
            }
        }

        // Load chat history when page loads
        loadChatHistory();

        // Add event listener for Enter key
        messageInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        // Add clear chat functionality
        document.getElementById('clear-chat-button').addEventListener('click', async () => {
            if (confirm('Are you sure you want to clear your chat history? This cannot be undone.')) {
                try {
                    const response = await fetch('/api/chat', {
                        method: 'DELETE'
                    });

                    const data = await response.json();
                    
                    if (response.ok) {
                        // Clear the chat messages container
                        messagesContainer.innerHTML = '';
                        
                        // Display the new welcome message
                        if (data.history && data.history.length > 0) {
                            data.history.forEach(msg => {
                                addMessage(msg.content, msg.role === 'user');
                            });
                        }
                    } else {
                        console.error('Failed to clear chat:', data.error);
                        alert('Failed to clear chat history. Please try again.');
                    }
                } catch (error) {
                    console.error('Error clearing chat:', error);
                    alert('An error occurred while clearing chat history. Please try again.');
                }
            }
        });
    </script>

</body>
</html>